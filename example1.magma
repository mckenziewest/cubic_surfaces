Diagonal_Cubic_Computation := function(A,B,C,D)
  // The field we can guarantee definition over
    _<T> := PolynomialRing(Rationals());
    poly := (T^3-A)*(T^3-B)*(T^3-C)*(T^3-D);
    K := SplittingField(poly);
    print(K);

  // Define Projective Space and Cubic Polynomial
  P3<x,y,z,w>:=ProjectiveSpace(K,3);
  cubic:=A*x^3+B*y^3+C*z^3+D*w^3;
  X:=Scheme(P3,cubic);
  if IsSingular(X) then
    print "That curve is singular, fool";
    return 0;
  end if;

  // Generate the space of possible lines
  AA2<alpha,beta> := AffineSpace(K,2);
  paramters<s,t> := PolynomialRing(CoordinateRing(AA2),2);
  line_parametrizations := [[s,t,alpha*s,beta*t],[s,t,beta*t,alpha*s]];

  // Compute the lines of the form [x=alpha y, z=beta w]
  // Make the substitutions from the definition of the line
  xy_zw_lines := Evaluate(DefiningEquation(X), [alpha*s,s, beta*t,t]);
  // Since we want the result to be identically zero, we extract the coefficients
  // and create the variety (Scheme) of the resulting polynomials in alpha and beta
  L_xy_zw := Scheme(AA2,Coefficients(xy_zw_lines));
  xy_zw_line_coeffs := Points(L_xy_zw);
  lines := [* *];
  for pt in xy_zw_line_coeffs do
    Append(~lines, Scheme(P3,[x-pt[1]*y,z-pt[2]*w]));
  end for;

  // Repeat this process for lines of the form [x=alpha z, y=beta w] and [x=alpha w, y=beta z]
  xz_yw_lines := Evaluate(DefiningEquation(X), [alpha*s,beta*t,s,t]);
  L_xz_yw := Scheme(AA2,Coefficients(xz_yw_lines));
  xz_yw_line_coeffs := Points(L_xz_yw);
  for pt in xz_yw_line_coeffs do
    Append(~lines, Scheme(P3,[x-pt[1]*z,y-pt[2]*w]));
  end for;
  xw_yz_lines := Evaluate(DefiningEquation(X), [alpha*s,beta*t,t,s]);
  L_xw_yz := Scheme(AA2,Coefficients(xw_yz_lines));
  xw_yz_line_coeffs := Points(L_xw_yz);
  for pt in xw_yz_line_coeffs do
    Append(~lines, Scheme(P3,[x-pt[1]*w,y-pt[2]*z]));
  end for;

  // certify that there are 27 lines
  assert #lines eq 27;

  // certify that the lines are on the surface
  for l in lines do
      assert l subset X;
  end for;
  print 2*ArithmeticGenus(lines[1]);
  // create the intersection matrix
  Intersection_Matrix := ScalarMatrix(27,-1);
  for i in [1..26] do
      for j in [i+1 ..27] do
          Intersection_Matrix[i,j] := Degree(lines[i] meet lines[j]);
          Intersection_Matrix[j,i] := Intersection_Matrix[i,j];
      end for;
  end for;
  // The row space of the matrix
  print RowSpace(Intersection_Matrix);

  // The Galois group, aka the automorphisms of K fixing Q
  GalK, _, Tau := AutomorphismGroup(K,Rationals());
  // In the line above, notice that three things are given by the AutomorphismGroup funciton
  // GalK - the Galois group, given by permutations
  // _ - a list we don't use so we don't even give it a name
  // Tau - a map from the group of permutations to the group of actual automorphisms on the field
  // Thus in the next line here, we create a list of the automorphisms
  autoperms := [* Tau(sig) : sig in Generators(GalK) *];

  // The following function inputs a polynomial and an element, sigma of autoperms
  // it then applies the galois element to the coefficients of the polynomial, returning the new one
  AutPolyAction := function(poly,sigma)
    // k is the field such that poly in k[x]
    k := BaseRing(Parent(poly));
    // m is the list of monomials, for example if poly = ax+by-cz, then m=[x,y,z]
    m := Monomials(poly);
    // c is the list of coefficients, for example if poly = ax+by-cz, then c=[a,b,-c]
    c := Coefficients(poly);
    // Here &+ means "add all the elements in the list together"
    // and @ means "plug the value before this into the map after it"
    // and k! means "view the following value as an element of k"
    return &+[ k!(c[i]@sigma)*m[i]:i in [1..#c]];
  end function;

  // This function takes in a variety (Scheme) and an element of autoperms
  // then determines the variety after applying the element to the variety
  AutSchemeAction := function(Y,sigma)
    C := AmbientSpace(Y);
    // The value of [AutPolyAction(poly,sigma): poly in DefiningPolynomials(Y)]
    // is the list of polynomials after applying the automorphism to the polynomials that
    // define the original variety.
    return Scheme(C, [AutPolyAction(poly,sigma): poly in DefiningPolynomials(Y)]);
  end function;

  // This function takes in an element of the automorphism group and determines
  // how it permutes the 27 lines and saves it as a list (one-line notation)
  Laction := function(lines,sigma)
    return [Index(lines,AutSchemeAction(l,sigma)):l in lines];
  end function;

  // Save the group of permutations of lines given by the action of the Galois
  // group to the group G.
  G := PermutationGroup<27|[Laction(lines,sig):sig in autoperms]>;

  for g in Generators(G) do
    M := PermutationMatrix(Integers(),g);
    assert M*Intersection_Matrix*Transpose(M) eq Intersection_Matrix;
  end for;

  // We now consider the permutation matrices as acting on the integer 1,...,27
  // this needs to be done in order to compute the group H1(GalK,Pic)
  LambdaMod := PermutationModule(G,Integers());
  rhoL := Representation(LambdaMod);
  Lambda := VectorSpace(LambdaMod);
  // The row space of the intersection matrix (the Picard Group) is isomorphic
  // to the quotient of the full-dimension vector space by the kernel of the matrix.
  Pic, class := quo<Lambda | Kernel(Intersection_Matrix)>;
  // Here's a little bit of linear algebra setup, we'll accept it as necessary
  ClassMatrix := Matrix([class(Lambda.i):i in [1..27]]);
  ClassSection := Solution(ClassMatrix,IdentityMatrix(Integers(),7));
  PicMod := GModule(G,[ClassSection * M * ClassMatrix : M in ActionGenerators(LambdaMod)]);
  CM := CohomologyModule(G,PicMod);
  // And finally, H1(GalK,Pic), which is isomorphic to Br S/Br Q
  H1 := CohomologyGroup(CM,1);
  print "Scheme=",X;
  print "#G=",#G;
  print "Pic", Pic;
  print "Size of H1=",#H1;
  print "Some information on H1";
  return H1;
end function;
Diagonal_Cubic_Computation(1,1,1,1)
